


import pandas as pd
from sqlalchemy import create_engine
import os
import sys
from dotenv import load_dotenv
# Adicionar o diret√≥rio raiz ao path
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.insert(0, project_root)

from src.utils.naming_conventions import NamingConventions
from src.validation.data_validator import validate_dimension_data, get_validation_summary
from src.core.exceptions import DimensionCreationError, DataValidationError


# Adicionar diret√≥rio raiz ao path para imports
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(current_dir)))
sys.path.insert(0, project_root)

from src.core.core import salvar_df_bd

# Carregar vari√°veis de ambiente
load_dotenv()

DB_HOST = os.getenv("DB_HOST")
DB_NAME = os.getenv("DB_NAME")
DB_USER = os.getenv("DB_USER")
DB_PASS = os.getenv("DB_PASS")
DB_PORT = os.getenv("DB_PORT")

def extrair_dados_ods():
    """
    Extrai dados dos 20 Objetivos de Desenvolvimento Sustent√°vel (17 ODS oficiais da ONU + 3 ODS expandidos).
    Baseado no documento: "Descritores 17 ODS (+18+19+20) CACS 23062024_Vers√£o Consolidada"
    """
    print("üéØ Extraindo dados dos ODS (Objetivos de Desenvolvimento Sustent√°vel)...")
    
    try:
        # Dados dos 17 ODS oficiais da ONU + 3 ODS expandidos (18, 19, 20)
        ods_data = [
            (1, "Erradica√ß√£o da pobreza", "Acabar com a pobreza em todas as suas formas, em todos os lugares.", "pobreza extrema, renda per capita, vulnerabilidade social, prote√ß√£o social, acesso a servi√ßos b√°sicos, desigualdade de renda, linha de pobreza, seguran√ßa econ√¥mica"),
            (2, "Fome zero e agricultura sustent√°vel", "Acabar com a fome, alcan√ßar a seguran√ßa alimentar e melhorar a nutri√ß√£o e promover a agricultura sustent√°vel.", "seguran√ßa alimentar, nutri√ß√£o infantil, agricultura familiar, produtividade agr√≠cola, sistemas alimentares sustent√°veis, agroecologia, soberania alimentar, desnutri√ß√£o"),
            (3, "Sa√∫de e bem-estar", "Assegurar uma vida saud√°vel e promover o bem-estar para todos, em todas as idades.", "mortalidade materno-infantil, doen√ßas transmiss√≠veis, sa√∫de mental, cobertura universal de sa√∫de, acesso a medicamentos, epidemias, sa√∫de reprodutiva, vacina√ß√£o"),
            (4, "Educa√ß√£o de qualidade", "Assegurar a educa√ß√£o inclusiva e equitativa e de qualidade, e promover oportunidades de aprendizagem ao longo da vida para todos.", "educa√ß√£o b√°sica universal, alfabetiza√ß√£o, ensino superior, forma√ß√£o t√©cnica profissional, igualdade de acesso educacional, educa√ß√£o para desenvolvimento sustent√°vel, infraestrutura escolar"),
            (5, "Igualdade de g√™nero", "Alcan√ßar a igualdade de g√™nero e empoderar todas as mulheres e meninas.", "empoderamento feminino, viol√™ncia de g√™nero, participa√ß√£o pol√≠tica das mulheres, direitos reprodutivos, lideran√ßa feminina, discrimina√ß√£o de g√™nero, igualdade salarial, trabalho dom√©stico n√£o remunerado"),
            (6, "√Ågua pot√°vel e saneamento", "Assegurar a disponibilidade e gest√£o sustent√°vel da √°gua e saneamento para todos.", "acesso universal √† √°gua pot√°vel, saneamento b√°sico, gest√£o integrada de recursos h√≠dricos, qualidade da √°gua, efici√™ncia h√≠drica, prote√ß√£o de ecossistemas aqu√°ticos, higiene"),
            (7, "Energia limpa e acess√≠vel", "Assegurar o acesso confi√°vel, sustent√°vel, moderno e a pre√ßo acess√≠vel √† energia para todos.", "energias renov√°veis, efici√™ncia energ√©tica, acesso universal √† energia, matriz energ√©tica limpa, tecnologias sustent√°veis de energia, energia solar, energia e√≥lica, biomassa"),
            (8, "Trabalho decente e crescimento econ√¥mico", "Promover o crescimento econ√¥mico sustentado, inclusivo e sustent√°vel, emprego pleno e produtivo e trabalho decente para todos.", "emprego pleno e produtivo, trabalho decente, crescimento econ√¥mico inclusivo, produtividade econ√¥mica, empreendedorismo, direitos trabalhistas, trabalho infantil, trabalho for√ßado"),
            (9, "Ind√∫stria, inova√ß√£o e infraestrutura", "Construir infraestruturas resilientes, promover a industrializa√ß√£o inclusiva e sustent√°vel e fomentar a inova√ß√£o.", "infraestrutura resiliente, industrializa√ß√£o sustent√°vel, inova√ß√£o tecnol√≥gica, pesquisa e desenvolvimento, conectividade, acesso √† internet, pequenas ind√∫strias, transfer√™ncia de tecnologia"),
            (10, "Redu√ß√£o das desigualdades", "Reduzir a desigualdade dentro dos pa√≠ses e entre eles.", "desigualdade de renda, inclus√£o social e econ√¥mica, migra√ß√£o segura e ordenada, pol√≠ticas redistributivas, discrimina√ß√£o, igualdade de oportunidades, representa√ß√£o nos processos decis√≥rios"),
            (11, "Cidades e comunidades sustent√°veis", "Tornar as cidades e os assentamentos humanos inclusivos, seguros, resilientes e sustent√°veis.", "urbaniza√ß√£o sustent√°vel, habita√ß√£o adequada e acess√≠vel, transporte p√∫blico sustent√°vel, gest√£o de res√≠duos urbanos, planejamento urbano participativo, patrim√¥nio cultural e natural, espa√ßos p√∫blicos seguros"),
            (12, "Consumo e produ√ß√£o respons√°veis", "Assegurar padr√µes de produ√ß√£o e de consumo sustent√°veis.", "efici√™ncia no uso de recursos naturais, economia circular, gest√£o sustent√°vel de res√≠duos, pr√°ticas sustent√°veis corporativas, consumo consciente, desperd√≠cio de alimentos, produtos qu√≠micos e res√≠duos perigosos"),
            (13, "A√ß√£o contra a mudan√ßa global do clima", "Tomar medidas urgentes para combater a mudan√ßa clim√°tica e seus impactos.", "mitiga√ß√£o clim√°tica, adapta√ß√£o √†s mudan√ßas clim√°ticas, redu√ß√£o de emiss√µes de gases do efeito estufa, resili√™ncia clim√°tica, financiamento clim√°tico, educa√ß√£o clim√°tica, desastres relacionados ao clima"),
            (14, "Vida na √°gua", "Conservar e usar sustentavelmente os oceanos, os mares e os recursos marinhos para o desenvolvimento sustent√°vel.", "conserva√ß√£o marinha e costeira, pesca sustent√°vel, polui√ß√£o oce√¢nica, ecossistemas aqu√°ticos, acidifica√ß√£o dos oceanos, biodiversidade marinha, √°reas marinhas protegidas, recursos gen√©ticos marinhos"),
            (15, "Vida terrestre", "Proteger, recuperar e promover o uso sustent√°vel dos ecossistemas terrestres, gerir de forma sustent√°vel as florestas, combater a desertifica√ß√£o.", "biodiversidade terrestre, desertifica√ß√£o, gest√£o florestal sustent√°vel, conserva√ß√£o de habitats, esp√©cies amea√ßadas de extin√ß√£o, degrada√ß√£o do solo, tr√°fico de fauna e flora, ecossistemas de montanha"),
            (16, "Paz, justi√ßa e institui√ß√µes eficazes", "Promover sociedades pac√≠ficas e inclusivas para o desenvolvimento sustent√°vel, proporcionar o acesso √† justi√ßa para todos.", "redu√ß√£o da viol√™ncia, estado de direito, acesso √† justi√ßa, transpar√™ncia institucional, combate √† corrup√ß√£o, institui√ß√µes eficazes e respons√°veis, participa√ß√£o cidad√£, identidade legal universal"),
            (17, "Parcerias e meios de implementa√ß√£o", "Fortalecer os meios de implementa√ß√£o e revitalizar a parceria global para o desenvolvimento sustent√°vel.", "coopera√ß√£o internacional, assist√™ncia oficial ao desenvolvimento, financiamento para desenvolvimento, transfer√™ncia de tecnologia, capacita√ß√£o institucional, parcerias multissetoriais, com√©rcio internacional justo"),
            (18, "Ci√™ncia, tecnologia e inova√ß√£o", "Promover o desenvolvimento cient√≠fico, tecnol√≥gico e a inova√ß√£o como motores do desenvolvimento sustent√°vel.", "pesquisa cient√≠fica, desenvolvimento tecnol√≥gico, inova√ß√£o para sustentabilidade, acesso ao conhecimento cient√≠fico, forma√ß√£o de recursos humanos em CT&I, infraestrutura de pesquisa, propriedade intelectual, divulga√ß√£o cient√≠fica"),
            (19, "Cultura e desenvolvimento sustent√°vel", "Reconhecer e promover o papel da cultura como dimens√£o essencial do desenvolvimento sustent√°vel.", "diversidade cultural, patrim√¥nio cultural material e imaterial, ind√∫strias criativas, direitos culturais, di√°logo intercultural, cultura e educa√ß√£o, cultura e meio ambiente, express√µes culturais tradicionais"),
            (20, "Governan√ßa global e coopera√ß√£o internacional", "Fortalecer a governan√ßa global e a coopera√ß√£o internacional para alcan√ßar os objetivos de desenvolvimento sustent√°vel.", "multilateralismo, institui√ß√µes internacionais, coopera√ß√£o sul-sul, diplomacia para desenvolvimento, acordos internacionais, reforma da governan√ßa global, representatividade internacional, solidariedade global")
        ]
        
        # Converter para DataFrame
        df_ods = pd.DataFrame(ods_data, columns=["ods_numero", "ods_nome", "ods_descricao", "ods_temas_relacionados"])
        
        # Adicionar campo de tipo (Oficial da ONU ou Expandido)
        df_ods['ods_tipo'] = df_ods['ods_numero'].apply(lambda x: 'Oficial ONU' if x <= 17 else 'Expandido')
        
        # Tratar e limpar dados
        df_ods = tratar_dados_ods(df_ods)
        
        print(f"‚úÖ Dados dos ODS extra√≠dos: {len(df_ods)} registros (17 ODS oficiais + 3 expandidos)")
        
        return df_ods
        
    except Exception as e:
        print(f"‚ùå Erro ao extrair dados dos ODS: {e}")
        return pd.DataFrame()

def tratar_dados_ods(df_ods):
    """
    Trata e limpa os dados dos ODS.
    """
    try:
        # Normalizar textos
        df_ods['ods_nome'] = df_ods['ods_nome'].str.strip().str.title()
        df_ods['ods_descricao'] = df_ods['ods_descricao'].str.strip()
        
        # Adicionar campos auxiliares
        df_ods['ods_codigo'] = 'ODS-' + df_ods['ods_numero'].astype(str).str.zfill(2)
        df_ods['ods_status'] = 'Ativo'
        df_ods['ods_categoria'] = df_ods['ods_numero'].apply(categorizar_ods)
        
        # Adicionar registro SK=0 (desconhecido/n√£o aplic√°vel)
        registro_sk0 = create_sk0_record()
        df_ods = pd.concat([registro_sk0, df_ods], ignore_index=True)
        
        # Adicionar surrogate key (come√ßando do 0)
        df_ods.insert(0, 'ods_sk', range(0, len(df_ods)))
        
        return df_ods
        
    except Exception as e:
        print(f"‚ùå Erro ao tratar dados dos ODS: {e}")
        return df_ods

def categorizar_ods(numero):
    """
    Categoriza os ODS em grupos tem√°ticos baseado nas dimens√µes do desenvolvimento sustent√°vel.
    Inclui os 17 ODS oficiais + 3 ODS expandidos (18, 19, 20).
    """
    categorias = {
        1: 'Social',          # Erradica√ß√£o da pobreza
        2: 'Social-Ambiental', # Fome zero e agricultura sustent√°vel
        3: 'Social',          # Sa√∫de e bem-estar
        4: 'Social',          # Educa√ß√£o de qualidade
        5: 'Social',          # Igualdade de g√™nero
        6: 'Ambiental',       # √Ågua pot√°vel e saneamento
        7: 'Ambiental-Econ√¥mico', # Energia limpa e acess√≠vel
        8: 'Econ√¥mico-Social', # Trabalho decente e crescimento econ√¥mico
        9: 'Econ√¥mico',       # Ind√∫stria, inova√ß√£o e infraestrutura
        10: 'Social',         # Redu√ß√£o das desigualdades
        11: 'Social-Ambiental', # Cidades e comunidades sustent√°veis
        12: 'Ambiental-Econ√¥mico', # Consumo e produ√ß√£o respons√°veis
        13: 'Ambiental',      # A√ß√£o contra a mudan√ßa clim√°tica
        14: 'Ambiental',      # Vida na √°gua
        15: 'Ambiental',      # Vida terrestre
        16: 'Governan√ßa',     # Paz, justi√ßa e institui√ß√µes eficazes
        17: 'Governan√ßa',     # Parcerias e meios de implementa√ß√£o
        18: 'Econ√¥mico-Social', # Ci√™ncia, tecnologia e inova√ß√£o
        19: 'Social',         # Cultura e desenvolvimento sustent√°vel
        20: 'Governan√ßa'      # Governan√ßa global e coopera√ß√£o internacional
    }
    return categorias.get(numero, 'Geral')

def create_sk0_record():
    """
    Cria o registro SK=0 para valores desconhecidos/n√£o aplic√°veis.
    """
    registro_sk0 = {
        'ods_numero': 0,
        'ods_nome': 'N√£o informado',
        'ods_descricao': 'Registro para valores desconhecidos ou n√£o aplic√°veis',
        'ods_temas_relacionados': 'N√£o informado',
        'ods_codigo': 'ODS-00',
        'ods_status': 'N√£o informado',
        'ods_categoria': 'N√£o informado',
        'ods_tipo': 'N√£o informado'
    }
    
    return pd.DataFrame([registro_sk0])

def salvar_dimensao_ods(df_ods):
    """
    Salva a dimens√£o ODS no banco de dados PostgreSQL.
    """
    try:
        # Criar conex√£o com o banco
        from sqlalchemy import create_engine
        import os
        from dotenv import load_dotenv
        
        load_dotenv()
        DB_HOST = os.getenv("DB_HOST")
        DB_NAME = os.getenv("DB_NAME")
        DB_USER = os.getenv("DB_USER")
        DB_PASS = os.getenv("DB_PASS")
        DB_PORT = os.getenv("DB_PORT")
        
        url = f'postgresql+psycopg2://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}'
        engine = create_engine(url)
        
        with engine.begin() as conn:
            # Primeiro criar a tabela com estrutura expl√≠cita
            create_table_sql = """
            CREATE TABLE IF NOT EXISTS dim_ods (
                ods_sk INTEGER PRIMARY KEY,
                ods_numero INTEGER NOT NULL,
                ods_nome VARCHAR(255) NOT NULL,
                ods_descricao TEXT,
                ods_temas_relacionados TEXT,
                ods_codigo VARCHAR(20) NOT NULL,
                ods_status VARCHAR(50),
                ods_categoria VARCHAR(50),
                ods_tipo VARCHAR(50) NOT NULL DEFAULT 'Oficial ONU',
                CONSTRAINT check_ods_numero CHECK (ods_numero >= 0 AND ods_numero <= 20)
            );
            
            COMMENT ON TABLE dim_ods IS 'Dimens√£o dos Objetivos de Desenvolvimento Sustent√°vel - 17 ODS oficiais da ONU + 3 ODS expandidos (Ci√™ncia/Tecnologia, Cultura, Governan√ßa Global)';
            COMMENT ON COLUMN dim_ods.ods_sk IS 'Surrogate key da dimens√£o ODS';
            COMMENT ON COLUMN dim_ods.ods_numero IS 'N√∫mero do ODS (1-20, onde 18-20 s√£o ODS expandidos)';
            COMMENT ON COLUMN dim_ods.ods_tipo IS 'Tipo do ODS: Oficial ONU (1-17) ou Expandido (18-20)';
            COMMENT ON COLUMN dim_ods.ods_categoria IS 'Categoria tem√°tica: Social, Ambiental, Econ√¥mico, Governan√ßa, ou combina√ß√µes';
            COMMENT ON COLUMN dim_ods.ods_temas_relacionados IS 'Descritores e palavras-chave relacionadas ao ODS para classifica√ß√£o de pesquisas';
            """
            
            # Executar a cria√ß√£o da tabela
            conn.exec_driver_sql(create_table_sql)
            
            # Limpar tabela se j√° existir dados
            conn.exec_driver_sql("DELETE FROM dim_ods;")
            
            # Inserir dados
            df_ods.to_sql('dim_ods', conn, if_exists='append', index=False)
        print(f"‚úÖ Dimens√£o ODS salva no PostgreSQL com {len(df_ods)} registros")
            
    except Exception as e:
        print(f"‚ùå Erro ao salvar dimens√£o ODS: {e}")

if __name__ == "__main__":
    print("üöÄ Iniciando processo de cria√ß√£o da dimens√£o ODS")
    print("üéØ Fonte: Descritores 17 ODS (+18+19+20) CACS - Vers√£o Consolidada")
    print("üìã Inclui: 17 ODS oficiais da ONU + 3 ODS expandidos")
    
    # Extrair dados dos ODS
    df_ods = extrair_dados_ods()
    
    if df_ods.empty:
        print("‚ùå Nenhum dado foi retornado. Encerrando o script.")
        exit(1)
    
    # Salvar no banco
    salvar_dimensao_ods(df_ods)
    
    # Mostrar algumas estat√≠sticas
    print("\nüìä Estat√≠sticas da dimens√£o ODS:")
    print(f"Total de registros: {len(df_ods)} (incluindo SK=0)")
    
    # Estat√≠sticas por tipo
    if 'ods_tipo' in df_ods.columns:
        print(f"\nüìå ODS por tipo:")
        df_stats_tipo = df_ods[df_ods['ods_sk'] != 0]
        for tipo in sorted(df_stats_tipo['ods_tipo'].unique()):
            count = len(df_stats_tipo[df_stats_tipo['ods_tipo'] == tipo])
            print(f"  {tipo}: {count} ODS")
    
    # Estat√≠sticas por categoria
    if 'ods_categoria' in df_ods.columns:
        print(f"\nüè∑Ô∏è  ODS por categoria:")
        df_stats_cat = df_ods[df_ods['ods_sk'] != 0]
        for categoria in sorted(df_stats_cat['ods_categoria'].unique()):
            count = len(df_stats_cat[df_stats_cat['ods_categoria'] == categoria])
            print(f"  {categoria}: {count} ODS")
    
    # Mostrar lista completa dos ODS (excluindo registro SK=0)
    df_lista = df_ods[df_ods['ods_sk'] != 0].sort_values('ods_numero')
    if len(df_lista) > 0:
        print(f"\nüéØ Lista completa dos ODS:")
        print("\nüìç ODS Oficiais da ONU (1-17):")
        for _, row in df_lista[df_lista['ods_numero'] <= 17].iterrows():
            print(f"  {row['ods_codigo']}: {row['ods_nome']} [{row['ods_categoria']}]")
        
        print("\nüìç ODS Expandidos (18-20):")
        for _, row in df_lista[df_lista['ods_numero'] > 17].iterrows():
            print(f"  {row['ods_codigo']}: {row['ods_nome']} [{row['ods_categoria']}]")
    
    print(f"\n‚úÖ Processo conclu√≠do! Dimens√£o ODS criada com sucesso.")
    print("üí° A dimens√£o inclui 20 ODS organizados por categorias e tipos.")
    print("üî¨ ODS 18-20 s√£o expans√µes para contemplar Ci√™ncia/Tecnologia, Cultura e Governan√ßa Global.")
    print("üîó Esta dimens√£o pode ser usada para an√°lises de alinhamento da pesquisa de p√≥s-gradua√ß√£o com os ODS.")
    print("üìù Os descritores em 'ods_temas_relacionados' facilitam a classifica√ß√£o autom√°tica de produ√ß√µes.")